# Generated by Django 5.1.5 on 2025-01-18 21:24

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254, unique=True, verbose_name="adresse e-mail"
                    ),
                ),
                ("prenom", models.CharField(max_length=100, verbose_name="prénom")),
                ("nom", models.CharField(max_length=100, verbose_name="nom")),
                (
                    "is_staff",
                    models.BooleanField(default=False, verbose_name="statut staff"),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="actif")),
                (
                    "date_inscription",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="date d'inscription"
                    ),
                ),
                (
                    "numero_securite_sociale",
                    models.CharField(
                        blank=True,
                        max_length=15,
                        null=True,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Le numéro de sécurité sociale doit contenir 13 ou 15 chiffres.",
                                regex="^\\d{13}$|^\\d{15}$",
                            )
                        ],
                        verbose_name="numéro de sécurité sociale",
                    ),
                ),
                (
                    "adresse",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="adresse"
                    ),
                ),
                (
                    "code_postal",
                    models.CharField(
                        blank=True, max_length=5, verbose_name="code postal"
                    ),
                ),
                (
                    "ville",
                    models.CharField(blank=True, max_length=100, verbose_name="ville"),
                ),
                (
                    "telephone",
                    models.CharField(
                        blank=True,
                        max_length=10,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Le numéro de téléphone doit être au format 0XXXXXXXXX.",
                                regex="^0\\d{9}$",
                            )
                        ],
                        verbose_name="téléphone",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "utilisateur",
                "verbose_name_plural": "utilisateurs",
            },
        ),
    ]
